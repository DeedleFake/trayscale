// Code generated by gtkbuilder. DO NOT EDIT.

package main

import (
	"github.com/diamondburned/gotk4-adwaita/pkg/adw"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

type MainWindow struct {
	*adw.ApplicationWindow

	ToastOverlay   *adw.ToastOverlay
	Leaflet        *adw.Leaflet
	StatusSwitch   *gtk.Switch
	MainMenuButton *gtk.MenuButton
	BackButton     *gtk.Button
	PeersStack     *gtk.Stack
}

func NewMainWindow(app *gtk.Application) *MainWindow {
	ToastOverlay := adw.NewToastOverlay()
	Leaflet := adw.NewLeaflet()
	Leaflet0 := gtk.NewBox(0, 0)
	Leaflet00 := adw.NewHeaderBar()
	StatusSwitch := gtk.NewSwitch()
	MainMenuButton := gtk.NewMenuButton()
	Leaflet01 := gtk.NewStackSidebar()
	Leaflet1 := gtk.NewBox(0, 0)
	Leaflet10 := adw.NewHeaderBar()
	Leaflet100 := gtk.NewBox(0, 0)
	BackButton := gtk.NewButton()
	PeersStack := gtk.NewStack()
	parent := adw.NewApplicationWindow(app)

	ToastOverlay.SetChild(Leaflet)

	Leaflet.SetObjectProperty("can-navigate-back", true)
	Leaflet.Append(Leaflet0)
	Leaflet.Append(Leaflet1)

	Leaflet0.SetObjectProperty("orientation", 1)
	Leaflet0.SetObjectProperty("width-request", 360)
	Leaflet0.Append(Leaflet00)
	Leaflet0.Append(Leaflet01)

	Leaflet00.SetObjectProperty("show-end-title-buttons", false)
	Leaflet.NotifyProperty("folded", func() {
		Leaflet00.SetObjectProperty("show-end-title-buttons", Leaflet.ObjectProperty("folded"))
	})
	Leaflet00.SetObjectProperty("show-end-title-buttons", Leaflet.ObjectProperty("folded"))
	Leaflet00.PackStart(StatusSwitch)
	Leaflet00.PackEnd(MainMenuButton)

	MainMenuButton.SetObjectProperty("icon-name", "open-menu-symbolic")
	MainMenuButton.SetObjectProperty("primary", true)
	MainMenuButton.SetObjectProperty("menu-model", MainMenu)

	Leaflet01.SetObjectProperty("stack", PeersStack)
	Leaflet01.SetObjectProperty("vexpand", true)
	Leaflet01.SetObjectProperty("width-request", 270)

	Leaflet1.SetObjectProperty("hexpand", true)
	Leaflet1.SetObjectProperty("orientation", 1)
	Leaflet1.Append(Leaflet10)
	Leaflet1.Append(PeersStack)

	Leaflet10.SetObjectProperty("show-start-title-buttons", false)
	Leaflet.NotifyProperty("folded", func() {
		Leaflet10.SetObjectProperty("show-start-title-buttons", Leaflet.ObjectProperty("folded"))
	})
	Leaflet10.SetObjectProperty("show-start-title-buttons", Leaflet.ObjectProperty("folded"))
	Leaflet10.SetTitleWidget(Leaflet100)
	Leaflet10.PackStart(BackButton)

	BackButton.SetObjectProperty("has-frame", false)
	BackButton.SetObjectProperty("icon-name", "go-previous-symbolic")
	Leaflet.NotifyProperty("folded", func() {
		BackButton.SetObjectProperty("visible", Leaflet.ObjectProperty("folded"))
	})
	BackButton.SetObjectProperty("visible", Leaflet.ObjectProperty("folded"))

	PeersStack.SetObjectProperty("transition-type", 7)
	PeersStack.SetObjectProperty("vexpand", true)

	parent.SetObjectProperty("content", ToastOverlay)
	parent.SetObjectProperty("default-height", 600)
	parent.SetObjectProperty("default-width", 800)
	parent.SetObjectProperty("title", "Trayscale")

	return &MainWindow{
		ApplicationWindow: parent,

		ToastOverlay:   ToastOverlay,
		Leaflet:        Leaflet,
		StatusSwitch:   StatusSwitch,
		MainMenuButton: MainMenuButton,
		BackButton:     BackButton,
		PeersStack:     PeersStack,
	}
}

type PeerPage struct {
	*adw.StatusPage

	IPGroup                 *adw.PreferencesGroup
	OptionsGroup            *adw.PreferencesGroup
	AdvertiseExitNodeRow    *adw.ActionRow
	AdvertiseExitNodeSwitch *gtk.Switch
	AllowLANAccessRow       *adw.ActionRow
	AllowLANAccessSwitch    *gtk.Switch
	AdvertisedRoutesGroup   *adw.PreferencesGroup
	AdvertiseRouteButton    *gtk.Button
	NetCheckGroup           *adw.PreferencesGroup
	NetCheckButton          *gtk.Button
	LastNetCheckRow         *adw.ActionRow
	LastNetCheck            *gtk.Label
	UDPRow                  *adw.ActionRow
	UDP                     *gtk.Image
	IPv4Row                 *adw.ActionRow
	IPv4Icon                *gtk.Image
	IPv4Addr                *gtk.Label
	IPv6Row                 *adw.ActionRow
	IPv6Icon                *gtk.Image
	IPv6Addr                *gtk.Label
	UPnPRow                 *adw.ActionRow
	UPnP                    *gtk.Image
	PMPRow                  *adw.ActionRow
	PMP                     *gtk.Image
	PCPRow                  *adw.ActionRow
	PCP                     *gtk.Image
	HairPinningRow          *adw.ActionRow
	HairPinning             *gtk.Image
	PreferredDERPRow        *adw.ActionRow
	PreferredDERP           *gtk.Label
	DERPLatencies           *adw.ExpanderRow
	MiscGroup               *adw.PreferencesGroup
	ExitNodeRow             *adw.ActionRow
	ExitNodeSwitch          *gtk.Switch
	OnlineRow               *adw.ActionRow
	Online                  *gtk.Image
	LastSeenRow             *adw.ActionRow
	LastSeen                *gtk.Label
	CreatedRow              *adw.ActionRow
	Created                 *gtk.Label
	LastWriteRow            *adw.ActionRow
	LastWrite               *gtk.Label
	LastHandshakeRow        *adw.ActionRow
	LastHandshake           *gtk.Label
	RxBytesRow              *adw.ActionRow
	RxBytes                 *gtk.Label
	TxBytesRow              *adw.ActionRow
	TxBytes                 *gtk.Label
}

func NewPeerPage() *PeerPage {
	parent0 := adw.NewClamp()
	parent00 := gtk.NewBox(0, 0)
	IPGroup := adw.NewPreferencesGroup()
	OptionsGroup := adw.NewPreferencesGroup()
	AdvertiseExitNodeRow := adw.NewActionRow()
	AdvertiseExitNodeSwitch := gtk.NewSwitch()
	AllowLANAccessRow := adw.NewActionRow()
	AllowLANAccessSwitch := gtk.NewSwitch()
	AdvertisedRoutesGroup := adw.NewPreferencesGroup()
	AdvertiseRouteButton := gtk.NewButton()
	NetCheckGroup := adw.NewPreferencesGroup()
	NetCheckButton := gtk.NewButton()
	LastNetCheckRow := adw.NewActionRow()
	LastNetCheck := gtk.NewLabel("")
	UDPRow := adw.NewActionRow()
	UDP := gtk.NewImage()
	IPv4Row := adw.NewActionRow()
	IPv4Icon := gtk.NewImage()
	IPv4Addr := gtk.NewLabel("")
	IPv6Row := adw.NewActionRow()
	IPv6Icon := gtk.NewImage()
	IPv6Addr := gtk.NewLabel("")
	UPnPRow := adw.NewActionRow()
	UPnP := gtk.NewImage()
	PMPRow := adw.NewActionRow()
	PMP := gtk.NewImage()
	PCPRow := adw.NewActionRow()
	PCP := gtk.NewImage()
	HairPinningRow := adw.NewActionRow()
	HairPinning := gtk.NewImage()
	PreferredDERPRow := adw.NewActionRow()
	PreferredDERP := gtk.NewLabel("")
	DERPLatencies := adw.NewExpanderRow()
	MiscGroup := adw.NewPreferencesGroup()
	ExitNodeRow := adw.NewActionRow()
	ExitNodeSwitch := gtk.NewSwitch()
	OnlineRow := adw.NewActionRow()
	Online := gtk.NewImage()
	LastSeenRow := adw.NewActionRow()
	LastSeen := gtk.NewLabel("")
	CreatedRow := adw.NewActionRow()
	Created := gtk.NewLabel("")
	LastWriteRow := adw.NewActionRow()
	LastWrite := gtk.NewLabel("")
	LastHandshakeRow := adw.NewActionRow()
	LastHandshake := gtk.NewLabel("")
	RxBytesRow := adw.NewActionRow()
	RxBytes := gtk.NewLabel("")
	TxBytesRow := adw.NewActionRow()
	TxBytes := gtk.NewLabel("")
	parent := adw.NewStatusPage()

	parent0.SetChild(parent00)

	parent00.SetObjectProperty("orientation", 1)
	parent00.SetObjectProperty("spacing", 12)
	parent00.Append(IPGroup)
	parent00.Append(OptionsGroup)
	parent00.Append(AdvertisedRoutesGroup)
	parent00.Append(NetCheckGroup)
	parent00.Append(MiscGroup)

	IPGroup.SetObjectProperty("title", "Tailscale IPs")

	OptionsGroup.SetObjectProperty("title", "Options")
	OptionsGroup.Add(AdvertiseExitNodeRow)
	OptionsGroup.Add(AllowLANAccessRow)

	AdvertiseExitNodeRow.SetObjectProperty("activatable-widget", AdvertiseExitNodeSwitch)
	AdvertiseExitNodeRow.SetObjectProperty("title", "Advertise exit node")
	AdvertiseExitNodeRow.AddSuffix(AdvertiseExitNodeSwitch)

	AdvertiseExitNodeSwitch.SetObjectProperty("margin-bottom", 12)
	AdvertiseExitNodeSwitch.SetObjectProperty("margin-top", 12)

	AllowLANAccessRow.SetObjectProperty("activatable-widget", AllowLANAccessSwitch)
	AllowLANAccessRow.SetObjectProperty("title", "Allow LAN access")
	AllowLANAccessRow.AddSuffix(AllowLANAccessSwitch)

	AllowLANAccessSwitch.SetObjectProperty("margin-bottom", 12)
	AllowLANAccessSwitch.SetObjectProperty("margin-top", 12)

	AdvertisedRoutesGroup.SetObjectProperty("header-suffix", AdvertiseRouteButton)
	AdvertisedRoutesGroup.SetObjectProperty("title", "Advertised Routes")

	AdvertiseRouteButton.SetObjectProperty("has-frame", false)
	AdvertiseRouteButton.SetObjectProperty("icon-name", "list-add-symbolic")

	NetCheckGroup.SetObjectProperty("header-suffix", NetCheckButton)
	NetCheckGroup.SetObjectProperty("title", "Network Check")
	NetCheckGroup.Add(LastNetCheckRow)
	NetCheckGroup.Add(UDPRow)
	NetCheckGroup.Add(IPv4Row)
	NetCheckGroup.Add(IPv6Row)
	NetCheckGroup.Add(UPnPRow)
	NetCheckGroup.Add(PMPRow)
	NetCheckGroup.Add(PCPRow)
	NetCheckGroup.Add(HairPinningRow)
	NetCheckGroup.Add(PreferredDERPRow)
	NetCheckGroup.Add(DERPLatencies)

	NetCheckButton.SetObjectProperty("has-frame", false)
	NetCheckButton.SetObjectProperty("icon-name", "view-refresh-symbolic")

	LastNetCheckRow.SetObjectProperty("title", "Last run")
	LastNetCheckRow.AddSuffix(LastNetCheck)

	LastNetCheck.SetObjectProperty("label", "Never")

	UDPRow.SetObjectProperty("title", "UDP")
	UDPRow.SetObjectProperty("visible", false)
	UDPRow.AddSuffix(UDP)

	IPv4Row.SetObjectProperty("title", "IPv4")
	IPv4Row.SetObjectProperty("visible", false)
	IPv4Row.AddSuffix(IPv4Icon)
	IPv4Row.AddSuffix(IPv4Addr)

	IPv6Row.SetObjectProperty("title", "IPv6")
	IPv6Row.SetObjectProperty("visible", false)
	IPv6Row.AddSuffix(IPv6Icon)
	IPv6Row.AddSuffix(IPv6Addr)

	UPnPRow.SetObjectProperty("title", "UPnP")
	UPnPRow.SetObjectProperty("visible", false)
	UPnPRow.AddSuffix(UPnP)

	PMPRow.SetObjectProperty("title", "NAT port mapping protocol")
	PMPRow.SetObjectProperty("visible", false)
	PMPRow.AddSuffix(PMP)

	PCPRow.SetObjectProperty("title", "Port control protocol")
	PCPRow.SetObjectProperty("visible", false)
	PCPRow.AddSuffix(PCP)

	HairPinningRow.SetObjectProperty("title", "Hair pinning")
	HairPinningRow.SetObjectProperty("visible", false)
	HairPinningRow.AddSuffix(HairPinning)

	PreferredDERPRow.SetObjectProperty("title", "Preferred DERP")
	PreferredDERPRow.SetObjectProperty("visible", false)
	PreferredDERPRow.AddSuffix(PreferredDERP)

	PreferredDERP.SetObjectProperty("label", "Never")

	DERPLatencies.SetObjectProperty("title", "DERP Latencies")
	DERPLatencies.SetObjectProperty("visible", false)

	MiscGroup.SetObjectProperty("title", "Misc.")
	MiscGroup.Add(ExitNodeRow)
	MiscGroup.Add(OnlineRow)
	MiscGroup.Add(LastSeenRow)
	MiscGroup.Add(CreatedRow)
	MiscGroup.Add(LastWriteRow)
	MiscGroup.Add(LastHandshakeRow)
	MiscGroup.Add(RxBytesRow)
	MiscGroup.Add(TxBytesRow)

	ExitNodeRow.SetObjectProperty("activatable-widget", ExitNodeSwitch)
	ExitNodeRow.SetObjectProperty("icon-name", "security-high-symbolic")
	ExitNodeRow.SetObjectProperty("title", "Use as exit node")
	ExitNodeRow.AddSuffix(ExitNodeSwitch)

	ExitNodeSwitch.SetObjectProperty("margin-bottom", 12)
	ExitNodeSwitch.SetObjectProperty("margin-top", 12)

	OnlineRow.SetObjectProperty("title", "Online")
	OnlineRow.AddSuffix(Online)

	LastSeenRow.SetObjectProperty("title", "Last seen")
	LastSeenRow.AddSuffix(LastSeen)

	CreatedRow.SetObjectProperty("title", "Created at")
	CreatedRow.AddSuffix(Created)

	LastWriteRow.SetObjectProperty("title", "Last write")
	LastWriteRow.AddSuffix(LastWrite)

	LastHandshakeRow.SetObjectProperty("title", "Last handshake")
	LastHandshakeRow.AddSuffix(LastHandshake)

	RxBytesRow.SetObjectProperty("title", "Bytes received")
	RxBytesRow.AddSuffix(RxBytes)

	TxBytesRow.SetObjectProperty("title", "Bytes sent")
	TxBytesRow.AddSuffix(TxBytes)

	parent.SetChild(parent0)

	return &PeerPage{
		StatusPage: parent,

		IPGroup:                 IPGroup,
		OptionsGroup:            OptionsGroup,
		AdvertiseExitNodeRow:    AdvertiseExitNodeRow,
		AdvertiseExitNodeSwitch: AdvertiseExitNodeSwitch,
		AllowLANAccessRow:       AllowLANAccessRow,
		AllowLANAccessSwitch:    AllowLANAccessSwitch,
		AdvertisedRoutesGroup:   AdvertisedRoutesGroup,
		AdvertiseRouteButton:    AdvertiseRouteButton,
		NetCheckGroup:           NetCheckGroup,
		NetCheckButton:          NetCheckButton,
		LastNetCheckRow:         LastNetCheckRow,
		LastNetCheck:            LastNetCheck,
		UDPRow:                  UDPRow,
		UDP:                     UDP,
		IPv4Row:                 IPv4Row,
		IPv4Icon:                IPv4Icon,
		IPv4Addr:                IPv4Addr,
		IPv6Row:                 IPv6Row,
		IPv6Icon:                IPv6Icon,
		IPv6Addr:                IPv6Addr,
		UPnPRow:                 UPnPRow,
		UPnP:                    UPnP,
		PMPRow:                  PMPRow,
		PMP:                     PMP,
		PCPRow:                  PCPRow,
		PCP:                     PCP,
		HairPinningRow:          HairPinningRow,
		HairPinning:             HairPinning,
		PreferredDERPRow:        PreferredDERPRow,
		PreferredDERP:           PreferredDERP,
		DERPLatencies:           DERPLatencies,
		MiscGroup:               MiscGroup,
		ExitNodeRow:             ExitNodeRow,
		ExitNodeSwitch:          ExitNodeSwitch,
		OnlineRow:               OnlineRow,
		Online:                  Online,
		LastSeenRow:             LastSeenRow,
		LastSeen:                LastSeen,
		CreatedRow:              CreatedRow,
		Created:                 Created,
		LastWriteRow:            LastWriteRow,
		LastWrite:               LastWrite,
		LastHandshakeRow:        LastHandshakeRow,
		LastHandshake:           LastHandshake,
		RxBytesRow:              RxBytesRow,
		RxBytes:                 RxBytes,
		TxBytesRow:              TxBytesRow,
		TxBytes:                 TxBytes,
	}
}

var MainMenu = gio.NewMenu()

func init() {
	s0 := gio.NewMenu()
	s0i0 := gio.NewMenuItem("_About", "app.about")
	s0.AppendItem(s0i0)
	s0i1 := gio.NewMenuItem("_Quit", "app.quit")
	s0.AppendItem(s0i1)

	MainMenu.AppendSection("", s0)
}
